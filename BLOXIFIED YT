local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
-- window
local Window = Rayfield:CreateWindow({
    Name = "Sen Hub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Welcome to Sen Hub",
    LoadingSubtitle = "Premium Features Unlocked",
    Theme = "Dark", -- Stylized theme for a premium look. Check https://docs.sirius.menu/rayfield/configuration/themes for more options.

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
       Enabled = true,
       FolderName = "SenHub", -- Custom folder for saving configurations
       FileName = "SenHub_Config"
    },

    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "SenCommunity", -- Replace with your actual Discord invite code
       RememberJoins = true -- Set this to false to make them join the Discord every time they load it up
    },

    KeySystem = true, -- Enable the key system
    KeySettings = {
       Title = "Sen Hub Key System",
       Subtitle = "Enter Your Premium Key",
       Note = "Use the key provided to access premium features.",
       FileName = "SenHub_Key", -- Unique key file name
       SaveKey = true, -- Save the user's key for future sessions
       GrabKeyFromSite = false, -- Set to true if you want to fetch the key from a site
       Key = { -- List of accepted keys
           "SenHubPremium",
           "SenHubKey",
           "PremiumAccess",
           "KeyForSenHub",
           "SenHubVIP",
           "SenHubKey",
           "LULU"
       }
    }
})

-- Add a new tab for actions
local ActionTab = Window:CreateTab("Actions", 4483362458) -- Title, Icon ID

-- Add a toggle to spam the "E" key
local spamCollectEnabled = false -- Variable to track the toggle state

local Toggle = ActionTab:CreateToggle({
    Name = "Spam Collect (20m Range)",
    CurrentValue = false,
    Flag = "SpamCollectToggle", -- Unique identifier for the toggle
    Callback = function(Value)
        spamCollectEnabled = Value -- Update the toggle state
        if Value then
            -- Code to execute when the toggle is turned on
            spawn(function()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                while spamCollectEnabled do
                    -- Check for proximity prompts within 20 meters
                    for _, prompt in pairs(workspace:GetDescendants()) do
                        if prompt:IsA("ProximityPrompt") and prompt.Enabled then
                            local distance = (prompt.Parent.Position - humanoidRootPart.Position).Magnitude
                            if distance <= 20 then -- Check if within 20 meters
                                pcall(function()
                                    prompt:InputHoldBegin() -- Start interacting
                                    task.wait(0.01) -- Very fast interaction
                                    prompt:InputHoldEnd() -- Stop interacting
                                end)
                            end
                        end
                    end
                    task.wait(0.01) -- Reduce delay for faster checks
                end
            end)
        else
            -- Code to execute when the toggle is turned off
            print("Spam Collect disabled")
        end
    end,
})

-- Add a button to disable all functions and destroy the UI
local DestroyUIButton = ActionTab:CreateButton({
    Name = "Disable All and Destroy UI",
    Callback = function()
        -- Disable all active functions
        spamEEnabled = false -- Disable the spam E function
        print("All functions disabled")

        -- Destroy the UI
        Rayfield:Destroy() -- Destroy the Rayfield UI
        print("UI destroyed")
    end,
})

-- Add a toggle to sell inventory
local sellInventoryEnabled = false -- Variable to track the toggle state

local SellInventoryToggle = ActionTab:CreateToggle({
    Name = "Auto Sell Inventory",
    CurrentValue = false,
    Flag = "SellInventoryToggle", -- Unique identifier for the toggle
    Callback = function(Value)
        sellInventoryEnabled = Value -- Update the toggle state
        if Value then
            -- Code to execute when the toggle is turned on
            spawn(function()
                while sellInventoryEnabled do
                    -- Fire the Sell_Inventory event
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
                    task.wait(0.1) -- Adjust the delay as needed
                end
            end)
        else
            -- Code to execute when the toggle is turned off
            print("Auto Sell Inventory disabled")
        end
    end,
})

-- Add a new tab for player settings
local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Icon ID

-- Add a slider to adjust walk speed
local walkSpeed = 16 -- Default walk speed
PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 100}, -- Minimum and maximum walk speed
    Increment = 1, -- Step size
    Suffix = "Speed", -- Suffix for the value
    CurrentValue = walkSpeed, -- Default value
    Flag = "WalkSpeedSlider", -- Unique identifier for the slider
    Callback = function(Value)
        walkSpeed = Value -- Update the walk speed
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeed
    end,
})

-- Add a slider to adjust jump height
local jumpPower = 50 -- Default jump power
PlayerTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 200}, -- Minimum and maximum jump power
    Increment = 1, -- Step size
    Suffix = "Power", -- Suffix for the value
    CurrentValue = jumpPower, -- Default value
    Flag = "JumpPowerSlider", -- Unique identifier for the slider
    Callback = function(Value)
        jumpPower = Value -- Update the jump power
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPower
    end,
})

-- Add a toggle to enable "Go Through Walls"
local goThroughWallsEnabled = false -- Variable to track the toggle state

PlayerTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "GoThroughWallsToggle", -- Unique identifier for the toggle
    Callback = function(Value)
        goThroughWallsEnabled = Value -- Update the toggle state
        if Value then
            -- Code to enable "Go Through Walls"
            spawn(function()
                while goThroughWallsEnabled do
                    local player = game.Players.LocalPlayer
                    if player and player.Character then
                        for _, part in pairs(player.Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false -- Disable collision for all parts
                            end
                        end
                    end
                    task.wait(0.1) -- Adjust the delay as needed
                end
            end)
        else
            -- Code to disable "Go Through Walls"
            local player = game.Players.LocalPlayer
            if player and player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true -- Re-enable collision for all parts
                    end
                end
            end
            print("Go Through Walls disabled")
        end
    end,
})

-- Add a new tab for visual settings
local VisualTab = Window:CreateTab("Visual", 4483362458) -- Title, Icon ID

-- Add a toggle for ESP (Player Highlight)
local espEnabled = false -- Variable to track the toggle state

VisualTab:CreateToggle({
    Name = "hightlight players",
    CurrentValue = false,
    Flag = "PlayerESP", -- Unique identifier for the toggle
    Callback = function(Value)
        espEnabled = Value -- Update the toggle state
        if Value then
            -- Code to enable ESP
            spawn(function()
                while espEnabled do
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            -- Check if ESP already exists
                            if not player.Character:FindFirstChild("ESPBox") then
                                local espBox = Instance.new("BoxHandleAdornment")
                                espBox.Name = "ESPBox"
                                espBox.Adornee = player.Character
                                espBox.Size = player.Character:GetExtentsSize()
                                espBox.Color3 = Color3.new(1, 0, 0) -- Red color
                                espBox.AlwaysOnTop = true
                                espBox.ZIndex = 10
                                espBox.Transparency = 0.5
                                espBox.Parent = player.Character
                            end
                        end
                    end
                    task.wait(0.1) -- Adjust the delay as needed
                end
            end)
        else
            -- Code to disable ESP
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("ESPBox") then
                    player.Character:FindFirstChild("ESPBox"):Destroy()
                end
            end
            print("Player ESP disabled")
        end
    end,
})

--- Add a toggle for Tracers
local tracersEnabled = false -- Variable to track the toggle state

VisualTab:CreateToggle({
    Name = "Tracers",
    CurrentValue = false,
    Flag = "PlayerTracers", -- Unique identifier for the toggle
    Callback = function(Value)
        tracersEnabled = Value -- Update the toggle state
        if Value then
            -- Code to enable Tracers
            spawn(function()
                while tracersEnabled do
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            -- Create a tracer using Drawing API
                            local tracer = Drawing.new("Line")
                            tracer.Thickness = 1
                            tracer.Color = Color3.new(0, 1, 0) -- Green color
                            tracer.Transparency = 1
                            tracer.Visible = true

                            -- Update tracer position
                            spawn(function()
                                while tracersEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") do
                                    local rootPart = player.Character.HumanoidRootPart
                                    local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
                                    if onScreen then
                                        tracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y) -- Screen center
                                        tracer.To = Vector2.new(screenPos.X, screenPos.Y) -- Player position
                                        tracer.Visible = true
                                    else
                                        tracer.Visible = false
                                    end
                                    task.wait()
                                end
                                tracer:Remove() -- Remove tracer when player leaves or toggle is disabled
                            end)
                        end
                    end
                    task.wait(0.1) -- Adjust the delay as needed
                end
            end)
        else
            -- Code to disable Tracers
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("TracerLine") then
                    player.Character:FindFirstChild("TracerLine"):Destroy()
                end
            end
            print("Player Tracers disabled")
        end
    end,
})

-- Add a toggle for displaying player names
local namesEnabled = false -- Variable to track the toggle state

VisualTab:CreateToggle({
    Name = "ESP names",
    CurrentValue = false,
    Flag = "ShowPlayerNames", -- Unique identifier for the toggle
    Callback = function(Value)
        namesEnabled = Value -- Update the toggle state
        if Value then
            -- Code to enable player names
            spawn(function()
                while namesEnabled do
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            -- Check if the name tag already exists
                            if not player.Character:FindFirstChild("NameTag") then
                                local billboardGui = Instance.new("BillboardGui")
                                billboardGui.Name = "NameTag"
                                billboardGui.Adornee = player.Character:FindFirstChild("HumanoidRootPart")
                                billboardGui.Size = UDim2.new(0, 200, 0, 50)
                                billboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                billboardGui.AlwaysOnTop = true

                                local textLabel = Instance.new("TextLabel")
                                textLabel.Size = UDim2.new(1, 0, 1, 0)
                                textLabel.BackgroundTransparency = 1
                                textLabel.Text = player.Name
                                textLabel.TextColor3 = Color3.new(1, 1, 1) -- White color
                                textLabel.TextStrokeTransparency = 0 -- Add an outline
                                textLabel.Font = Enum.Font.SourceSansBold
                                textLabel.TextSize = 20
                                textLabel.Parent = billboardGui

                                billboardGui.Parent = player.Character
                            end
                        end
                    end
                    task.wait(0.1) -- Adjust the delay as needed
                end
            end)
        else
            -- Code to disable player names
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("NameTag") then
                    player.Character:FindFirstChild("NameTag"):Destroy()
                end
            end
            print("Player names disabled")
        end
    end,
})

-- Add a toggle for Fly with adjustable speed and camera-based controls
local flyEnabled = false -- Variable to track the toggle state
local flySpeed = 50 -- Default fly speed

PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Flag = "FlyToggle", -- Unique identifier for the toggle
    Callback = function(Value)
        flyEnabled = Value -- Update the toggle state
        if Value then
            -- Code to enable Fly
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            -- Disable gravity for smooth flying
            local bodyGyro = Instance.new("BodyGyro", humanoidRootPart)
            bodyGyro.P = 3000
            bodyGyro.CFrame = humanoidRootPart.CFrame
            bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)

            local bodyVelocity = Instance.new("BodyVelocity", humanoidRootPart)
            bodyVelocity.MaxForce = Vector3.new(400000, 400000, 400000)
            bodyVelocity.Velocity = Vector3.zero

            spawn(function()
                while flyEnabled do
                    if humanoidRootPart then
                        local camera = workspace.CurrentCamera
                        local moveDirection = Vector3.zero

                        -- Move in the direction the camera is pointing
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
                            moveDirection = moveDirection + camera.CFrame.LookVector
                        end
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
                            moveDirection = moveDirection - camera.CFrame.LookVector
                        end
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
                            moveDirection = moveDirection - camera.CFrame.RightVector
                        end
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
                            moveDirection = moveDirection + camera.CFrame.RightVector
                        end

                        -- Ascend and descend controls
                        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
                            moveDirection = moveDirection + Vector3.new(0, 1, 0)
                        elseif game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
                            moveDirection = moveDirection - Vector3.new(0, 1, 0)
                        end

                        -- Normalize and apply fly speed
                        if moveDirection.Magnitude > 0 then
                            moveDirection = moveDirection.Unit * flySpeed
                        end

                        bodyVelocity.Velocity = moveDirection
                    end
                    task.wait()
                end
            end)
        else
            -- Code to disable Fly
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                -- Remove BodyGyro and BodyVelocity to restore normal physics
                if character.HumanoidRootPart:FindFirstChild("BodyGyro") then
                    character.HumanoidRootPart.BodyGyro:Destroy()
                end
                if character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
                    character.HumanoidRootPart.BodyVelocity:Destroy()
                end
            end
            print("Fly disabled")
        end
    end,
})

-- Add a slider to adjust Fly speed
PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {10, 200}, -- Minimum and maximum fly speed
    Increment = 5, -- Step size
    Suffix = "Speed", -- Suffix for the value
    CurrentValue = flySpeed, -- Default value
    Flag = "FlySpeedSlider", -- Unique identifier for the slider
    Callback = function(Value)
        flySpeed = Value -- Update the fly speed
        print("Fly Speed set to:", flySpeed)
    end,
})

-- Add a button to teleport near "Sell Stands" in Workspace.NPCS
local TeleportTab = Window:CreateTab("Teleport", 4483362458) -- Create a new tab for teleportation

TeleportTab:CreateButton({
    Name = "Sell Stuff",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Find "Sell Stuff" in Workspace.NPCS
        local sellStands = workspace:FindFirstChild("NPCS") and workspace.NPCS:FindFirstChild("Sell Stands")
        if sellStands and sellStands:IsA("Model") then
            if sellStands.PrimaryPart then
                -- Teleport the player 1 meter (3.281 studs) in front of "Sell Stuff"
                local offset = sellStands.PrimaryPart.CFrame.LookVector * -3.281 -- Move backward by 1 meter
                humanoidRootPart.CFrame = sellStands.PrimaryPart.CFrame + offset
                print("Teleported near Sell Stuff (1 meter away)")
            else
                -- Fallback: Calculate the center of the model
                local modelCFrame = sellStands:GetModelCFrame()
                humanoidRootPart.CFrame = modelCFrame + Vector3.new(0, 0, -3.281) -- Move backward by 1 meter
                print("Teleported near Sell Stuff (fallback to model center)")
            end
        else
            print("Sell Stuff not found in Workspace.NPCS.")
        end
    end,
})

-- Add a button to teleport near "Seed Stands" in Worksp

TeleportTab:CreateButton({
    Name = "Seed Shop",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Find "Seed Stands" in Workspace.NPCS
        local seedStands = workspace:FindFirstChild("NPCS") and workspace.NPCS:FindFirstChild("Seed Stands")
        if seedStands and seedStands:IsA("Model") then
            if seedStands.PrimaryPart then
                -- Teleport the player 2 meters (6.562 studs) to the left of "Seed Stands"
                local offset = seedStands.PrimaryPart.CFrame.RightVector * -6.562 -- Move to the left by 2 meters
                humanoidRootPart.CFrame = seedStands.PrimaryPart.CFrame + offset
                print("Teleported to the left of Seed Stands (2 meters away)")
            else
                -- Fallback: Calculate the center of the model
                local modelCFrame = seedStands:GetModelCFrame()
                humanoidRootPart.CFrame = modelCFrame + Vector3.new(-6.562, 0, 0) -- Move to the left by 2 meters
                print("Teleported to the left of Seed Stands (fallback to model center)")
            end
        else
            print("Seed Stands not found in Workspace.NPCS.")
        end
    end,
})

TeleportTab:CreateButton({
    Name = "Gear Shop",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Find "Gear Stands" in Workspace.NPCS
        local gearStands = workspace:FindFirstChild("NPCS") and workspace.NPCS:FindFirstChild("Gear Stands")
        if gearStands and gearStands:IsA("Model") then
            if gearStands.PrimaryPart then
                -- Teleport the player 2 meters (6.562 studs) to the right of "Gear Stands"
                local offset = gearStands.PrimaryPart.CFrame.RightVector * 6.562 -- Move to the right by 2 meters
                humanoidRootPart.CFrame = gearStands.PrimaryPart.CFrame + offset
                print("Teleported to the right of Gear Stands (2 meters away)")
            else
                -- Fallback: Calculate the center of the model
                local modelCFrame = gearStands:GetModelCFrame()
                humanoidRootPart.CFrame = modelCFrame + Vector3.new(6.562, 0, 0) -- Move to the right by 2 meters
                print("Teleported to the right of Gear Stands (fallback to model center)")
            end
        else
            print("Gear Stands not found in Workspace.NPCS.")
        end
    end,
})

TeleportTab:CreateButton({
    Name = "Quest Giver",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Find "Quest Stand" in Workspace.NPCS
        local questStand = workspace:FindFirstChild("NPCS") and workspace.NPCS:FindFirstChild("Quest Stand")
        if questStand and questStand:IsA("Model") then
            if questStand.PrimaryPart then
                -- Teleport the player 2 meters (6.562 studs) in front of "Quest Stand"
                local offset = questStand.PrimaryPart.CFrame.LookVector * 6.562 -- Move forward by 2 meters
                humanoidRootPart.CFrame = questStand.PrimaryPart.CFrame + offset
                print("Teleported in front of Quest Stand (2 meters away)")
            else
                -- Fallback: Calculate the center of the model
                local modelCFrame = questStand:GetModelCFrame()
                humanoidRootPart.CFrame = modelCFrame + Vector3.new(6.562, 0, 0) -- Move forward by 2 meters
                print("Teleported in front of Quest Stand (fallback to model center)")
            end
        else
            print("Quest Stand not found in Workspace.NPCS.")
        end
    end,
})

TeleportTab:CreateButton({
    Name = "Hungry Plant(have same bug)",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Find "Pink Arrow" in Workspace.SeedPack
        local pinkArrow = workspace:FindFirstChild("SeedPack") and workspace.SeedPack:FindFirstChild("Pink Arrow")
        if pinkArrow and pinkArrow:IsA("Model") then
            if pinkArrow.PrimaryPart then
                -- Teleport the player 2 meters (6.562 studs) above "Pink Arrow"
                local offset = Vector3.new(0, 6.562, 0) -- Move 2 meters above
                humanoidRootPart.CFrame = pinkArrow.PrimaryPart.CFrame + offset
                print("Teleported 2 meters above Pink Arrow")
            else
                -- Fallback: Calculate the center of the model
                local modelCFrame = pinkArrow:GetModelCFrame()
                humanoidRootPart.CFrame = modelCFrame + Vector3.new(0, 6.562, 0) -- Move 2 meters above
                print("Teleported 2 meters above Pink Arrow (fallback to model center)")
            end
        else
            print("Pink Arrow not found in Workspace.SeedPack.")
        end
    end,
})


Rayfield:LoadConfiguration() -- Load the configuration file if it exists
